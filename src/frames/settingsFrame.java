
package frames;

import guifortest.Informer;
import java.awt.event.WindowEvent;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author clear_atom
 */
public class settingsFrame extends javax.swing.JFrame {

    String selectedFile;
    Boolean evalIm = false;
    Boolean tellPoints = false;
    Informer informer;
    /**
     * Creates new form settingsFrame
     * @param file
     */
    public settingsFrame(String file, Informer informer) {
        this.selectedFile = file;
        initComponents();
        initButtons();
        this.informer = informer;
    }

    @Override
    protected void processWindowEvent(WindowEvent e){
        if (e.getID() == WindowEvent.WINDOW_CLOSING){
            if (informer == null)
                System.exit(0);
            boolean exit = informer.checkIfNoEmptyFields();
            if (exit)
                System.exit(0);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jButtonBack = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jCheckBoxEv = new javax.swing.JCheckBox();
        jCheckBoxTl = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(228, 241, 254));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButtonBack.setBackground(new java.awt.Color(241, 130, 141));
        jButtonBack.setText("Back");
        jButtonBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonBackMouseClicked(evt);
            }
        });
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 266, 77, -1));
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(281, 81, 78, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Number of questions");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 81, 138, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Evaluate answer after each question");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 142, 237, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Final Settings");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 11, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Tell points at the end");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 214, 237, -1));

        jButton1.setBackground(new java.awt.Color(200, 247, 197));
        jButton1.setText("Confirm");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(294, 266, 96, -1));

        jCheckBoxEv.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jCheckBoxEv.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxEvMouseClicked(evt);
            }
        });
        jPanel1.add(jCheckBoxEv, new org.netbeans.lib.awtextra.AbsoluteConstraints(301, 142, -1, -1));

        jCheckBoxTl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBoxTlMouseClicked(evt);
            }
        });
        jPanel1.add(jCheckBoxTl, new org.netbeans.lib.awtextra.AbsoluteConstraints(301, 210, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initButtons(){
        try {
            Object obj = new JSONParser().parse(new FileReader(selectedFile)); 
            JSONObject jo = (JSONObject) obj;
            String locEvalImed = (String) jo.get("evaluateImmediately");
            if (locEvalImed.equals("True")){
                evalIm = true;
                jCheckBoxEv.setSelected(true);
            }  
            String locTellPoints = (String) jo.get("tellPoints");
            if (locTellPoints.equals("True")){
                tellPoints = true;
                jCheckBoxTl.setSelected(true);
            }
            Long numOfQuestions = (Long) jo.get("numOfQuestions");
            this.jTextField1.setText(String.valueOf(numOfQuestions));
        }
        catch (ParseException | IOException ex) {
            Logger.getLogger(greetingFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void jButtonBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonBackMouseClicked
        MainFrame mFrame = new MainFrame(selectedFile, informer);
        mFrame.setVisible(true);
        mFrame.pack();
        this.dispose();
    }//GEN-LAST:event_jButtonBackMouseClicked

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        String numOfQuestions = jTextField1.getText();
        try {
            Object obj = new JSONParser().parse(new FileReader(selectedFile)); 
            JSONObject jo = (JSONObject) obj;
            if (!numOfQuestions.equals(""))
                jo.put("numOfQuestions", Integer.parseInt(numOfQuestions)); 
            if (evalIm)
                jo.put("evaluateImmediately", "True"); 
            else
                jo.put("evaluateImmediately", "False"); 
            
            if (tellPoints)
                jo.put("tellPoints", "True"); 
            else
                jo.put("tellPoints", "False");
          
        PrintWriter pw = new PrintWriter(selectedFile); 
        pw.write(jo.toJSONString()); 
          
        pw.flush(); 
        pw.close(); 
        JOptionPane.showMessageDialog(rootPane, "Success");
        }
        catch (ParseException | IOException ex) {
            Logger.getLogger(greetingFrame.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton1MouseClicked

    private void jCheckBoxEvMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxEvMouseClicked
        evalIm = !evalIm;
    }//GEN-LAST:event_jCheckBoxEvMouseClicked

    private void jCheckBoxTlMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxTlMouseClicked
        tellPoints = !tellPoints;
    }//GEN-LAST:event_jCheckBoxTlMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonBack;
    private javax.swing.JCheckBox jCheckBoxEv;
    private javax.swing.JCheckBox jCheckBoxTl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
